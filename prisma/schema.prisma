// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}




model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// NextAuth.js required models
model User {
  id            String    @id @default(cuid())
  name          String?
  username      String    @unique // Required for login
  password      String    // Required for credentials provider
  role          UserRole  @default(VIEWER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  sessions     Session[]
  rainfallData RainfallData[]

  @@map("users")
}

enum UserRole {
  ADMIN
  OPERATOR
  VIEWER
}

// Location/Station management
model Location {
  id          String         @id @default(cuid())
  name        String         // e.g., "Gosowong Pit"
  code        String         @unique // e.g., "GSW-PIT"
  description String?        // Optional description
  status      LocationStatus @default(ACTIVE)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  rainfallData      RainfallData[]

  @@map("locations")
}

enum LocationStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

// Main rainfall data
model RainfallData {
  id        String   @id @default(cuid())
  date      DateTime // Date of measurement
  rainfall  Float    // Rainfall amount in mm
  notes     String?  // Optional notes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign keys
  locationId String
  userId     String? // User who entered the data

  // Relations
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  user     User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@unique([date, locationId]) // Prevent duplicate entries for same date and location
  @@map("rainfall_data")
}
